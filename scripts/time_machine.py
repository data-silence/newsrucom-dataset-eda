"""
The main class News is implemented here to process and store news for a certain date
Attributes and methods of the class allow to get any information that the bot is intended to provide on request
Handlers (handlers) pass the bot user's requests to News, and take the results of news processing from here.

–ó–¥–µ—Å—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å News –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É
–ê—Ç—Ä–∏–±—É—Ç—ã –∏ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ –ø–æ–∑–≤–æ–ª—è—é—Ç –ø–æ–ª—É—á–∏—Ç—å –ª—é–±—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –≤—ã–¥–∞–≤–∞—Ç—å –±–æ—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (—Ö—ç–Ω–¥–ª–µ—Ä—ã) –ø–µ—Ä–µ–¥–∞—é—Ç –≤ News –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞, –∏ –∑–∞–±–∏—Ä–∞—é—Ç –æ—Ç—Å—é–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
"""

from imports.imports import DataBaseMixin, AgglomerativeClustering, time_machine, dt, pd, Counter, sns, plt, model_class
from scripts.utils import news2emb, find_sim_news


class News(DataBaseMixin):
    """
    A class for collecting and storing user news on a date from the past
    –ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ –¥–∞—Ç—É –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ
    """

    def __init__(self, date: dt.datetime.date):
        self.categories = ['technology', 'science', 'economy', 'entertainment', 'sports', 'society']
        self.categories_dict = {
            'economy': {'russian_title': '—ç–∫–æ–Ω–æ–º–∏–∫–∞', 'emoj': 'üí∞'},
            'science': {'russian_title': '–Ω–∞—É–∫–∞', 'emoj': 'üî¨'},
            'sports': {'russian_title': '—Å–ø–æ—Ä—Ç', 'emoj': 'üèÉ'},
            'technology': {'russian_title': '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 'emoj': 'üì≤'},
            'entertainment': {'russian_title': '–æ–±—â–µ—Å—Ç–≤–æ', 'emoj': 'üëª'},
            'society': {'russian_title': '–ø–æ–ª–∏—Ç–∏–∫–∞', 'emoj': 'üë≤'}
        }
        self.date = date
        self.date_news = self.set_date_news()
        self.categories_news_dict = {category: self.get_labeled_news(category) for category in self.categories}

    def set_date_news(self) -> list[dict]:
        """
        Gets news on a given date from the past
        –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ
        """
        q = f"SELECT * FROM news WHERE date::date = '{self.date}' and agency = 'newsru.com'"
        date_news = DataBaseMixin.get(q, time_machine)
        return date_news

    def get_labeled_news(self, category: str) -> list[dict]:
        """
        Identifies news clusters using agglomerative clustering, assigns a cluster label to each news item
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å –ø–æ–º–æ—â—å—é –∞–≥–ª–æ–º–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –∫–ª–∞—Å—Ç–µ—Ä—ã –Ω–æ–≤–æ—Å—Ç–µ–π, –ø—Ä–∏—Å–≤–∞–µ—Ç –ª–µ–π–±–ª –∫–ª–∞—Å—Ç–µ—Ä–∞ –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ—Å—Ç–∏
        """
        category_news = [dict(news) for news in self.date_news if news['category'] == category]
        emb_list = [news2emb(news['news']) for news in category_news]

        if len(category_news) > 1:  # –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é –≤–æ–∑–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –±–æ–ª–µ–µ –æ–¥–Ω–æ–π
            model = AgglomerativeClustering(n_clusters=None, metric='cosine', linkage='complete',
                                            distance_threshold=0.3)
            labels = model.fit_predict(list(emb_list))
            for news_number in range(len(category_news)):
                category_news[news_number]['label'] = labels[news_number]
                category_news[news_number]['embeddings'] = emb_list[news_number]
        elif len(category_news) == 1:  # –µ—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç—å –æ–¥–Ω–∞ - –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–π –ª–µ–π–±–ª = -1
            category_news[0]['label'] = -1
            category_news[0]['embeddings'] = emb_list[0]

        return category_news

    def __getitem__(self, category: str):
        """
        Gives the news of the required category
        –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –æ–±—Ä–∞—â–∞—è—Å—å –∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É –∫–ª–∞—Å—Å–∞ –∫–∞–∫ —Å–æ —Å–ª–æ–≤–∞—Ä—ë–º
        """
        if category in self.categories_dict:
            return self.categories_news_dict[category]
        else:
            raise ValueError(f"–ù–µ—Ç —Ç–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ: {[key for key in self.categories_dict.keys()]}")

    def get_top_cluster_news(self, category: str, amount_news: int) -> list[list]:
        """"
        Selects the top-k largest news clusters of a given category, gives it as a list
        –í—ã–±–∏—Ä–∞–µ—Ç top-k —Å–∞–º—ã—Ö –∫—Ä—É–ø–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –æ—Ç–¥–∞—ë—Ç –µ–≥–æ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞
        """
        final_cluster_news = []
        result_cluster_news = []
        category_news = self.get_labeled_news(category)
        if category_news:
            most_popular = Counter(news['label'] for news in category_news).most_common(amount_news)
            for label in range(len(most_popular)):
                claster_news = [news for news in category_news if news['label'] == most_popular[label][0]]
                final_cluster_news.append(claster_news)

            for label in range(len(most_popular)):
                links = set()
                for news in final_cluster_news[label]:
                    temp_links = set(news['links'].split(','))
                    links.add(news['url'])
                    links = links.union(temp_links)
                max_lenght = max({len(news['news']) for news in final_cluster_news[label]})
                claster_news = [news for news in final_cluster_news[label] if len(news['news']) == max_lenght]
                claster_news[0]['result_links'] = links
                result_cluster_news.append(claster_news)
        return result_cluster_news

    def get_category_digest(self, amount_news: int = 3) -> str:
        """
        Transforms a list of the most popular news in categories retrieved by get_top_cluster_news into a digest
        –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –≤ –¥–∞–π–¥–∂–µ—Å—Ç —Å–ø–∏—Å–æ–∫ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö get_top_cluster_news
        """
        category_digest = f'<b>üèé   {self.date.strftime("%d %B %Y")}   {"üí®" * 3} </b>\n'

        for category in self.categories:
            category_cluster_news = self.get_top_cluster_news(category=category,
                                                              amount_news=amount_news)
            if category_cluster_news:
                category_digest += (f'\n<b>{self.categories_dict[category]["emoj"]} '
                                    f'{self.categories_dict[category]["russian_title"].title()}:</b>')
                for i, news in enumerate(category_cluster_news):
                    for el in range(len(news)):
                        current_news = f'\n{i + 1}. <a href="{news[el]["url"]}">{news[el]["title"]}</a>'
                        category_digest += current_news
                category_digest += '\n'
        return category_digest

    def plot_categories(self) -> None:
        """
        Creates and saves a graph of news distribution by category
        –°–æ–∑–¥–∞—ë—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —Ä–∞–∑—Ä–µ–∑–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        """
        sns.set(style="darkgrid")
        df = pd.DataFrame(self.date_news)
        my_plot = sns.countplot(x=df.category, palette='tab10', hue=df.category.values, legend=False)
        my_plot.set_title(
            f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {len(df)} –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –Ω–∞ {self.date.strftime('%d %B %Y')}:", fontsize=12)
        my_plot.set_xlabel("", fontsize=8)
        my_plot.set_ylabel("", fontsize=8)
        plt.savefig('./graphs/cat_distr.png')

    def get_best_news(self, user_news: str) -> str:
        """
        :param user_news: search query for news from a user | –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: the news most similar to a user request | –Ω–æ–≤–æ—Å—Ç—å, –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∞—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
        """
        result_news_list = []
        best_category = model_class.predict(user_news)[0][0].split('__')[-1]

        df = pd.DataFrame(self.categories_news_dict[best_category])
        best_news = find_sim_news(df, user_news)
        date_time, title, resume, link = (best_news.date.iloc[0].strftime("%H:%m"), best_news.title.iloc[0],
                                          best_news.resume.iloc[0], best_news.url.iloc[0])
        result_news_list.append('–û–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: \n' + self.categories_dict[best_category]['emoj'] + ' ' +
                                self.categories_dict[best_category]['russian_title'] + '\n')
        result_news_list.append(f'–°–∞–º–∞—è –±–ª–∏–∑–∫–∞—è –Ω–æ–≤–æ—Å—Ç—å\n‚åö –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ {date_time}:\n')
        result_news_list.append(f'<a href="{link}">{title}</a>\n')
        result_news_list.append(resume)
        result_news = '\n'.join(result_news_list)
        return result_news
