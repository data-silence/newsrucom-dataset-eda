from imports.imports import dt
from imports.imports import ChoiseState
from imports.imports import Router, F, FSInputFile, ReplyKeyboardRemove

from imports.imports import Dispatcher, MemoryStorage, CommandStart, Message, FSMContext, CallbackQuery, CallbackData
from imports.imports import DialogCalendar, DialogCalendarCallback

from scripts.time_machine import News
from scripts.keyboards import make_row_keyboard, action_kb

from scripts.common_handlers import common_router

router = Router()

dp = Dispatcher(storage=MemoryStorage())
dp.include_routers(router, common_router)  # –í—Å–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –±–æ—Ç–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∑–¥–µ—Å—å


@dp.message(CommandStart())
async def dialog_timemachine(message: Message, state: FSMContext) -> None:
    await message.answer(
        text=str("üí®  –≠—Ç–æ ‚Äî –º–∞—à–∏–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏!  üí®\n\n"
                 "–û–Ω–∞ –º–æ–∂–µ—Ç –∑–∞–±—Ä–æ—Å–∏—Ç—å —Ç–µ–±—è –≤ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –ø–æ—Ç–æ–∫ –ø—Ä–æ—à–ª–æ–≥–æ.\n\n"
                 "–î–æ—Å—Ç—É–ø–Ω—ã –ø–æ–ª—ë—Ç—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ\n—Å 28 –∞–≤–≥—É—Å—Ç–∞ 2000 –ø–æ 31 –º–∞—è 2021 –≥–æ–¥–∞.\n\n"
                 "–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É, –ø—Ä–∏—Å—Ç–µ–≥–Ω–∏ —Ä–µ–º–Ω–∏, –∫–ª—é—á –ø–æ–≤–µ—Ä–Ω–∏ –∏ –ø–æ–ª–µ—Ç–µ–ª–∏! üõ∏"),
        reply_markup=await DialogCalendar().start_calendar(2010)  # –∑–∞–¥–∞–µ–º –≥–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é = —Å—Ä–µ–¥–Ω–µ–º—É –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ
    )
    await state.set_state(ChoiseState.choosing_date)


@dp.callback_query(DialogCalendarCallback.filter(), ChoiseState.choosing_date)
async def process_dialog_calendar(callback_query: CallbackQuery, callback_data: CallbackData, state: FSMContext):
    await state.set_data({})
    selected, date = await DialogCalendar().process_selection(callback_query, callback_data)
    if selected:
        if dt.datetime(2000, 8, 28) <= date <= dt.datetime(2021, 5, 31):
            await callback_query.message.answer('–û–∂–∏–¥–∞–π: –ø–µ—Ä–µ—Å–µ–∫–∞–µ–º –Ω–æ–≤–æ—Å—Ç–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ üöÄ')
            date_news = News(date)
            digest = date_news.get_category_digest()
            await state.update_data(date=date)
            await state.update_data(date_news=date_news)
            await callback_query.message.answer(
                digest, parse_mode='html')
            await (callback_query.message.answer
                   (text="–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ –æ–±–ª–∞–∫–æ –Ω–æ–≤–æ—Å—Ç–µ–π —ç—Ç–æ–≥–æ –¥–Ω—è, "
                         "–∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ —Å–∞–º—É—é –±–ª–∏–∑–∫—É—é –Ω–æ–≤–æ—Å—Ç—å –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–±—è —Ç–µ–º—É –≤ —Ç–æ—Ç –¥–µ–Ω—å.\n\n"
                         "–í—ã–±–µ—Ä–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–π –º–∞—Ä—à—Ä—É—Ç —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –Ω–∞ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏ üîΩ",
                    reply_markup=make_row_keyboard(action_kb)
                    ))
            await state.set_state(ChoiseState.choosing_action)
        else:
            await (callback_query.message.answer
                   (text="–ó–Ω–∞–µ–º –æ –Ω–æ–≤–æ—Å—Ç—è—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å 28 –∞–≤–≥—É—Å—Ç–∞ 2000 –≥–æ–¥–∞ –ø–æ 31 –º–∞—è 2021, "
                         "–¥–æ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–æ–ª–µ—Ç–µ—Ç—å –ø–æ–∫–∞ –Ω–µ –º–æ–∂–µ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞",
                    reply_markup=await DialogCalendar().start_calendar(2010)
                    ))


@router.message(ChoiseState.choosing_action, F.text.casefold() == "–æ–±–ª–∞–∫–æ")
async def graph(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    data['date_news'].plot_categories()
    cat_distr_graph = FSInputFile("./graphs/cat_distr.png")
    await message.answer_photo(cat_distr_graph)


@router.message(ChoiseState.choosing_action, F.text.casefold() == "–ø–æ–∏—Å–∫")
async def invite_to_search(message: Message, state: FSMContext) -> None:
    await (message.answer
        (
        text="–ù–∞–±–µ—Ä–∏ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã –∏–ª–∏ –Ω–æ–≤–æ—Å—Ç–∏ ‚Äî —Ç–æ–≥–æ, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç, "
             "–∞ —è –Ω–∞–π–¥—É —Å–∞–º—É—é –±–ª–∏–∑–∫—É—é –ø–æ –Ω–æ–≤–æ—Å—Ç—å –∑–∞ —ç—Ç—É –¥–∞—Ç—É.\n\n"
             "–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤: '–Ω–æ–≤–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π', '—Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏–∫–∏', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π",
        reply_markup=ReplyKeyboardRemove(),
    ))
    await state.set_state(ChoiseState.choosing_query)


@router.message(ChoiseState.choosing_action, F.text.casefold() == "–≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É")
async def invite_to_search(message: Message, state: FSMContext) -> None:
    await state.clear()
    await state.set_data({})
    await message.answer(
        text="–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Å 28 –∞–≤–≥—É—Å—Ç–∞ 2000 –≥–æ–¥–∞ –ø–æ 31 –º–∞—è 2021 –≥–æ–¥–∞",
        reply_markup=await DialogCalendar().start_calendar(2010),
    )
    await state.set_state(ChoiseState.choosing_date)


@router.message(ChoiseState.choosing_query)
async def search_similar_news(message: Message, state: FSMContext) -> None:
    q = message.text
    data = await state.get_data()
    best_news = data['date_news'].get_best_news(q)
    await message.answer(best_news, parse_mode='html')
    await message.answer(
        '–í—ã–±–µ—Ä–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–π –º–∞—Ä—à—Ä—É—Ç —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –Ω–∞ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏ (–≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç) üîΩ',
        reply_markup=make_row_keyboard(action_kb)
    )
    await state.set_state(ChoiseState.choosing_action)
