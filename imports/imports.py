"""
This is where the libraries are imported, and the supporting tools for working with the news database are defined
–ó–¥–µ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏, –∏ –∑–∞–¥–∞—é—Ç—Å—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
"""

# Common libs:
import os
import sys
import datetime as dt
import re
import logging
from collections import Counter
from numpy.linalg import norm

# ML libs:
import numpy as np
import pandas as pd
from sklearn.cluster import AgglomerativeClustering
from navec import Navec

# Fasttext
import warnings
import fasttext
warnings.filterwarnings("ignore")
fasttext.FastText.eprint = lambda x: None
model_class = fasttext.load_model("models//cat_model.ftz")


# Aiogram
from aiogram import Bot, Dispatcher, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile, CallbackQuery, Message
from aiogram.filters import CommandStart, Command
from aiogram.filters.callback_data import CallbackData

from aiogram_calendar import DialogCalendar, DialogCalendarCallback
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove




# Other libs
import asyncio
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
model_class = fasttext.load_model("models//cat_model.ftz")

# Graphs
import seaborn as sns
import matplotlib.pyplot as plt

sns.set(style="darkgrid")

help_text = ('üìï –í—Å—ë –ø—Ä–æ—Å—Ç–æ: —Å–ª–µ–¥—É–π –∑–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –∏ –Ω–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫–∏.\n–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π  '
             '/clear –∏–ª–∏ /start. –ï—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç - –∂–º–∏ "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é" –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞, –∏ —Å—Ç–∞—Ä—Ç—É–π '
             '–∑–∞–Ω–æ–≤–æ\n\nP.S. –ï—Å–ª–∏ –±–æ—Ç –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è, –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å –∞–≤—Ç–æ—Ä—É –æ–ø–ª–∞—á–∏–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ –∫–æ–º–∞–Ω–¥–µ /donate –º–æ–∂–Ω–æ '
             '—É–∑–Ω–∞—Ç—å, –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å.')

donate_text = ('üí∞ –ï—Å–ª–∏ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ—Ç –∏ —Ç—ã –∏–º –ø–æ–ª—å–∑—É–µ—à—å—Å—è, –º–æ–∂–Ω–æ –ø–æ–º–æ—á—å –∞–≤—Ç–æ—Ä—É –≤ –µ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.\n\n–†–æ—Å—Å–∏—è: 2202 '
               '2032 1457 8041\n\n–ó–∞—Ä—É–±–µ–∂:\n–ö–∞—Ä—Ç–∞: 4374 6901 0055 5257\nIBAN $: TR41 0013 4000 0210 3974 9000 '
               '02\nIBAN ‚Ç¨: TR14 0013 4000 0210 3974 9000 03\nIBAN ‚ÇΩ: TR84 0013 4000 0210 3974 9000 04')


class ChoiseState(StatesGroup):
    choosing_date = State()
    choosing_action = State()
    choosing_query = State()


load_dotenv()

DB_TM = os.getenv("DB_TM")
DB_USER = os.getenv("DB_USER")
DB_PASS = os.getenv("DB_PASS")
DB_HOST = os.getenv("DB_HOST")

time_machine = create_engine(
    f'postgresql+psycopg2://{DB_USER}:{DB_PASS}@{DB_HOST}/{DB_TM}', pool_pre_ping=True)

TOKEN = os.getenv("BOT_TOKEN")

navec = Navec.load('models//navec.tar')


class DataBaseMixin:
    """
    Contains a set of universal functions for working with databases
    –°–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–±–æ—Ä —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    """

    @staticmethod
    def get(query: str, engine) -> list[dict]:
        """
        db -> data as a list of dicts

        Accepts a query in the database and returns the result of its execution
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ –ë–î –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        with engine.begin() as conn:
            query_text = text(query)
            result_set = conn.execute(query_text)
            results_as_dict = result_set.mappings().all()
            return results_as_dict
